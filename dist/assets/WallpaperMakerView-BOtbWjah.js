var ue=Object.defineProperty;var ce=(o,t,a)=>t in o?ue(o,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):o[t]=a;var I=(o,t,a)=>(ce(o,typeof t!="symbol"?t+"":t,a),a);import{d as ne,r as P,w as q,f,c as v,e,h as m,i as T,l as A,g as S,C as pe,a as p,F as L,m as F,b as y,t as Z,q as M,j as me,o as de,n as _e,k as fe,v as he}from"./index-ztu_RY0m.js";import{C as b,T as ge,a as ve,_ as G}from"./Sketch-BAjGWOdi.js";import{T as we,C as ye,a as z,_ as ke}from"./CoefficientPickerSketch-DvQz9erA.js";import{R as be,C as Se,a as Ee,d as Re,_ as Ve}from"./ReferenceGeometryEditor.vue_vue_type_script_setup_true_lang-Bv63PA75.js";import{F as ee}from"./common_glsl-BTx0Zr80.js";import{d as U,b as O,C as te,c as Ce,D as Te,a as xe,W as Me}from"./WallpaperSketch-BMgxRabi.js";import{t as Pe,e as qe,m as D,c as ze,d as Ue}from"./math-DWFzcMo1.js";import{t as oe}from"./tuples-6lOvLNBg.js";import"./validation-Cv0neZFQ.js";const Ae={square:({n:o,m:t})=>[{n:t,m:-o},{n:-o,m:-t},{n:-t,m:o}],hexagon:({n:o,m:t})=>[{n:t,m:-(o+t)},{n:-(o+t),m:o}]};function Le(o,t){return Ae[o](t)}const Ne={negate:({r:o,theta:t})=>new b(-o,t),negate_n:({r:o,theta:t},{n:a})=>{const l=Math.pow(-1,a);return new b(l*o,t)},negate_m:({r:o,theta:t},{m:a})=>{const l=Math.pow(-1,a);return new b(l*o,t)},negate_nm:({r:o,theta:t},{n:a,m:l})=>{const _=Math.pow(-1,a+l);return new b(_*o,t)},negate_m1:({r:o,theta:t},{m:a})=>{const l=Math.pow(-1,a+1);return new b(l*o,t)},negate_n1:({r:o,theta:t},{n:a})=>{const l=Math.pow(-1,a+1);return new b(l*o,t)},negate_nm1:({r:o,theta:t},{n:a,m:l})=>{const _=Math.pow(-1,a+l+1);return new b(_*o,t)}};function We(o,t,a){return Ne[o](t,a)}const $e={negate:({n:o,m:t})=>({n:-o,m:-t}),negate_n:({n:o,m:t})=>({n:-o,m:t}),negate_m:({n:o,m:t})=>({n:o,m:-t}),swap:({n:o,m:t})=>({n:t,m:o}),negate_swap:({n:o,m:t})=>({n:-t,m:-o}),negate_m_swap:({n:o,m:t})=>({n:-t,m:o})};function Ie(o,t){return $e[o](t)}class le{constructor(t,a){I(this,"grid_size");I(this,"group");this.grid_size=t,this.group=a}frequency_map(t){const{row:a,col:l}=Pe(t,this.grid_size);return{n:l,m:a}}inverse_frequency_map(t){const{n:a,m:l}=t;return qe({row:l,col:a},this.grid_size)}is_editable(t){const{n:a,m:l}=this.frequency_map(t);if(this.group.base_rule==="hexagon"){const _=Math.floor(this.grid_size/2);if(Math.abs(a+l)>_)return!1}switch(this.group.parity){case"odd_m":return D(l,2)===1;case"odd_n":return D(a,2)===1;case"odd_nm":return D(a+l,2)==1}return!0}update_coefficients(t,a,l){const _=ze(a,this.grid_size),V=this.frequency_map(_),k=[];if(this.group.base_rule){const i=Le(this.group.base_rule,V),u=i.length+1,c=l.scale(1/u),d=[V,...i].map(g=>[g,c]);k.push(...d)}else k.push([V,l]);const h=this.group.rules??[];for(const i of h){const u=k.map(([c,d])=>{const g=Ie(i.partner,c);let E=d;return i.negate&&(E=We(i.negate,d,c)),[g,E]});k.push(...u)}for(const[i,u]of k){const c=this.inverse_frequency_map(i),d=Ue(c,this.grid_size);t[d]=u}}}const Ge={class:"form-row"},Oe=["value"],De=["value"],Fe=["value"],Ze={class:"form-row"},Be={class:"form-row"},je=["onClick"],He=ne({__name:"WallpaperPaletteEditor",props:{modelValue:{}},emits:["update:modelValue"],setup(o,{emit:t}){const l=P(o.modelValue),_=t;q(l,h=>{_("update:modelValue",h)},{deep:!0});function V(h){l.value.colors=l.value.colors.filter((i,u)=>u!==h)}function k(){l.value.colors.length>=12||l.value.colors.push(new Se(0,0,0))}return(h,i)=>(f(),v(L,null,[e("div",Ge,[e("label",null,[m(" Palette Type "),T(e("select",{"onUpdate:modelValue":i[0]||(i[0]=u=>l.value.palette_type=u)},[e("option",{value:S(U).HorizontalStripes},"Horizontal Stripes",8,Oe),e("option",{value:S(U).VerticalStripes},"Vertical Stripes",8,De),e("option",{value:S(U).Plaid},"Plaid",8,Fe)],512),[[A,l.value.palette_type]])])]),T(e("div",Ze,[e("label",null,[m(" Plaid diagonal thickness "),p(be,{min:1,max:20,step:1,modelValue:l.value.diagonal_thickness,"onUpdate:modelValue":i[1]||(i[1]=u=>l.value.diagonal_thickness=u)},null,8,["modelValue"])])],512),[[pe,l.value.palette_type===S(U).Plaid]]),(f(!0),v(L,null,F(l.value.colors,(u,c)=>(f(),v("div",{key:c},[e("div",Be,[p(Ee,{modelValue:l.value.colors[c],"onUpdate:modelValue":d=>l.value.colors[c]=d},{default:y(()=>[m("Color "+Z(c+1)+": ",1)]),_:2},1032,["modelValue","onUpdate:modelValue"]),e("button",{onClick:d=>V(c)},"Remove Color",8,je)])]))),128)),e("div",{class:"form-row"},[e("button",{onClick:k},"Add color")])],64))}}),Qe=e("h2",null,"Wallpaper Maker",-1),Xe=e("p",null,[m(" Using the dropdowns below, select a "),e("a",{href:"https://en.wikipedia.org/wiki/Wallpaper_group"},"wallpaper group"),m(" or one of the color-reversing variations listed in "),e("cite",null,"Creating Symmetry")],-1),Je={class:"form-row"},Ke=e("label",{for:"wallpaper-category"},"Select Category: ",-1),Ye=e("option",{value:"wallpaper"},"17 Wallpaper Groups",-1),et=e("option",{value:"reversing"},"46 Color-reversing Wallpaper Groups",-1),tt=[Ye,et],ot={class:"form-row"},lt=e("label",{for:"group"},"Select Wallpaper Group: ",-1),at=["value"],nt=["value"],st=e("details",null,[e("summary",null,"Math Details"),e("p",null," Wallpaper waves are the sum of plane waves traveling in different directions. Given how I implemented them in the shader, I phrase it slightly differently than the book does. The formula looks like this: "),e("math",{display:"block",class:"tml-display",style:{display:"block math"}},[e("mrow",null,[e("mi",null,"f"),e("mo",{form:"prefix",stretchy:"false"},"("),e("mi",null,"z"),e("mo",{form:"postfix",stretchy:"false"},")"),e("mo",null,"="),e("mrow",null,[e("munder",null,[e("mo",{movablelimits:"false"},"∑"),e("mrow",null,[e("mi",null,"n"),e("mo",{separator:"true"},","),e("mi",null,"m")])])]),e("msub",null,[e("mi",null,"a"),e("mrow",null,[e("mi",null,"n"),e("mo",{separator:"true"},","),e("mi",null,"m")])]),e("msup",null,[e("mi",null,"e"),e("mrow",null,[e("mn",null,"2"),e("mi",null,"π"),e("mi",null,"i"),e("mo",{form:"prefix",stretchy:"false"},"("),e("mi",null,"k"),e("mo",null,"⋅"),e("msup",null,[e("mi",null,"A"),e("mrow",null,[e("mo",{form:"prefix",stretchy:"false",lspace:"0em",rspace:"0em"},"−"),e("mn",null,"1")])]),e("mi",null,"z"),e("mo",{form:"postfix",stretchy:"false",lspace:"0em",rspace:"0em"},")")])])])]),e("p",null,[m(" Where "),e("math",null,[e("mi",null,"A")]),m(" is a matrix that changes to the basis of the lattice, "),e("math",null,[e("mi",null,"k")]),m(" is the wave vector (integer frequencies) and the dot represents a dot product (which makes the wave point in the direction of "),e("math",null,[e("mi",null,"k")]),m(" ) ")]),e("p",null," Similarly to the rosettes/friezes, the form takes the selected symmetry type and applies constraints to the coefficients to produce the desired symmetry. ")],-1),rt=e("p",null," Select a term from the grid. Then click and drag in the complex plane below to edit the term. ",-1),it={class:"form-row"},ut={class:"form-row"},ct={class:"form-row"},pt={class:"form-row"},mt={class:"form-row"},dt=e("summary",null,"Reference Geometry",-1),_t={key:0,class:"form-row"},ft={key:1},ae=3,Vt=ne({__name:"WallpaperMakerView",props:{category:{default:"wallpaper"},categoryModifiers:{},symmetry_group:{default:O.p1},symmetry_groupModifiers:{},reversing_group:{default:te.p1_p1},reversing_groupModifiers:{},enable_palette:{type:Boolean,default:!1},enable_paletteModifiers:{},ref_geom:{default:Re},ref_geomModifiers:{}},emits:["update:category","update:symmetry_group","update:reversing_group","update:enable_palette","update:ref_geom"],setup(o){const t=2*ae+1,a=t*t,l=ae,_=l*t+l,V=new xe,k=new Me,h=M(o,"category"),i=M(o,"symmetry_group"),u=M(o,"reversing_group"),c=me(()=>h.value==="wallpaper"?i.value:u.value),d=M(o,"enable_palette"),g=P(new le(t,c.value)),E=P(Te),N=M(o,"ref_geom"),W=P(),B=P(),j={series:ee.from_tuples([[1,0,1,0],[0,1,1,0]]),group:i.value},x=new Ce({pattern:j,palette:E.value}),R={cell_size:40,rows:t,cols:t,selected_index:_,coefficients:new Array(a).fill(b.ZERO),frequency_map:r=>g.value.frequency_map(r),editable_map:r=>g.value.is_editable(r)},H=new we(R),Q={coefficient:ve.ZERO},$=new ye(Q);H.events.addEventListener("term-selected",r=>{const n=r.detail;Q.coefficient=n.to_rect()});function X(r){oe(r,V).then(n=>{W.value=n}).catch(console.error)}function J(){const r=R.coefficients,n=[];for(let s=0;s<t;s++)for(let w=0;w<t;w++){const re=s*t+w,Y=r[re];if(Y.r===0)continue;const ie=g.value.frequency_map({row:s,col:w});n.push({frequencies:ie,coefficient:Y})}const C={series:new ee(n),group:c.value};x.pattern=C,X(C)}function K(r){const n=r.detail;g.value.update_coefficients(R.coefficients,R.selected_index,n.to_polar()),J()}$.events.addEventListener("change",K),$.events.addEventListener("input",K),q(d,r=>{x.show_palette=r});function se(r){oe(r,k).then(n=>{B.value=n}).catch(console.error)}return q(E,r=>{x.palette=r},{deep:!0}),q(c,r=>{const n=r??O.p1;g.value=new le(t,n),R.coefficients.fill(b.ZERO),R.selected_index=_,R.frequency_map=s=>g.value.frequency_map(s),R.editable_map=s=>g.value.is_editable(s),J()}),q(N,r=>{x.ref_geom=r},{deep:!0}),de(()=>{X(j),se(E.value)}),(r,n)=>{const C=fe("RouterLink");return f(),_e(ge,null,{left:y(()=>[p(G,{sketch:S(x),is_card:!0},null,8,["sketch"])]),right:y(()=>[Qe,p(ke,null,{default:y(()=>[p(z,{title:"Symmetry"},{default:y(()=>[Xe,e("div",Je,[Ke,T(e("select",{id:"wallpaper-category","onUpdate:modelValue":n[0]||(n[0]=s=>h.value=s)},tt,512),[[A,h.value]])]),e("div",ot,[lt,h.value==="wallpaper"?T((f(),v("select",{key:0,id:"group","onUpdate:modelValue":n[1]||(n[1]=s=>i.value=s)},[(f(!0),v(L,null,F(S(O),(s,w)=>(f(),v("option",{key:w,value:s},Z(w),9,at))),128))],512)),[[A,i.value]]):T((f(),v("select",{key:1,id:"group","onUpdate:modelValue":n[2]||(n[2]=s=>u.value=s)},[(f(!0),v(L,null,F(S(te),(s,w)=>(f(),v("option",{key:w,value:s},Z(w),9,nt))),128))],512)),[[A,u.value]])]),st]),_:1}),p(z,{title:"Pattern"},{default:y(()=>[rt,e("div",it,[p(G,{sketch:S(H),is_card:!1},null,8,["sketch"])]),e("div",ut,[p(G,{sketch:S($),is_card:!1},null,8,["sketch"])])]),_:1}),p(z,{title:"Palette"},{default:y(()=>[e("p",null,[m(' Select a palette type and edit the colors to customize your design. The "Show color palette" button shows what the color palette looks like for reference. See the '),p(C,{to:"/point_symmetry/tie_dye_analogy"},{default:y(()=>[m("Tie-Dye Analogy page")]),_:1}),m(" for an explanation of how the palette is applied. ")]),e("div",ct,[e("label",null,[T(e("input",{id:"toggle-palette",type:"checkbox","onUpdate:modelValue":n[3]||(n[3]=s=>d.value=s)},null,512),[[he,d.value]]),m(" Show color palette ")])]),e("div",pt,[p(He,{modelValue:E.value,"onUpdate:modelValue":n[4]||(n[4]=s=>E.value=s)},null,8,["modelValue"])]),e("details",mt,[dt,p(Ve,{modelValue:N.value,"onUpdate:modelValue":n[5]||(n[5]=s=>N.value=s)},null,8,["modelValue"])])]),_:1}),p(z,{title:"Export"},{default:y(()=>[W.value?(f(),v("div",_t,[p(C,{to:{path:"/wallpaper_symmetry",query:{custom_pattern:W.value,custom_palette:B.value}},target:"_blank"},{default:y(()=>[m("Viewer Link")]),_:1},8,["to"])])):(f(),v("div",ft,"Create a pattern using the other tabs, then a link will appear here"))]),_:1})]),_:1})]),_:1})}}});export{Vt as default};
