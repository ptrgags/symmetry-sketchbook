var ue=Object.defineProperty;var ce=(o,t,n)=>t in o?ue(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n;var I=(o,t,n)=>(ce(o,typeof t!="symbol"?t+"":t,n),n);import{d as se,r as P,w as q,f,c as v,e,h as p,i as C,l as U,g as S,C as pe,a as m,F as N,m as F,b as y,t as Z,q as M,j as me,o as de,n as _e,k as fe,v as he}from"./index-BgDKrswi.js";import{C as b,T as ge,a as ve,_ as G}from"./Sketch-Ywa2RNtX.js";import{T as we,C as ye,a as z,_ as ke}from"./CoefficientPickerSketch-SU6S0rqR.js";import{R as be,C as Se,a as Ee,d as Re,_ as Te}from"./ReferenceGeometryEditor.vue_vue_type_script_setup_true_lang-hETdR80Q.js";import{F as te}from"./common_glsl-BoMhYY0K.js";import{d as A,b as O,C as oe,c as Ve,D as Ce,a as xe,W as Me}from"./WallpaperSketch-Kxkxk6Ik.js";import{t as Pe,e as qe,m as D,c as ze,d as Ae}from"./math-DWFzcMo1.js";import{t as le}from"./tuples-6lOvLNBg.js";import"./validation-Cv0neZFQ.js";const Ue={square:({n:o,m:t})=>[{n:t,m:-o},{n:-o,m:-t},{n:-t,m:o}],hexagon:({n:o,m:t})=>[{n:t,m:-(o+t)},{n:-(o+t),m:o}]};function Ne(o,t){return Ue[o](t)}const Le={negate:({r:o,theta:t})=>new b(-o,t),negate_n:({r:o,theta:t},{n})=>{const l=Math.pow(-1,n);return new b(l*o,t)},negate_m:({r:o,theta:t},{m:n})=>{const l=Math.pow(-1,n);return new b(l*o,t)},negate_nm:({r:o,theta:t},{n,m:l})=>{const _=Math.pow(-1,n+l);return new b(_*o,t)},negate_m1:({r:o,theta:t},{m:n})=>{const l=Math.pow(-1,n+1);return new b(l*o,t)},negate_n1:({r:o,theta:t},{n})=>{const l=Math.pow(-1,n+1);return new b(l*o,t)},negate_nm1:({r:o,theta:t},{n,m:l})=>{const _=Math.pow(-1,n+l+1);return new b(_*o,t)}};function We(o,t,n){return Le[o](t,n)}const $e={negate:({n:o,m:t})=>({n:-o,m:-t}),negate_n:({n:o,m:t})=>({n:-o,m:t}),negate_m:({n:o,m:t})=>({n:o,m:-t}),swap:({n:o,m:t})=>({n:t,m:o}),negate_swap:({n:o,m:t})=>({n:-t,m:-o}),negate_m_swap:({n:o,m:t})=>({n:-t,m:o})};function Ie(o,t){return $e[o](t)}class ne{constructor(t,n){I(this,"grid_size");I(this,"group");this.grid_size=t,this.group=n}frequency_map(t){const{row:n,col:l}=Pe(t,this.grid_size);return{n:l,m:n}}inverse_frequency_map(t){const{n,m:l}=t;return qe({row:l,col:n},this.grid_size)}is_editable(t){const{n,m:l}=this.frequency_map(t);if(this.group.base_rule==="hexagon"){const _=Math.floor(this.grid_size/2);if(Math.abs(n+l)>_)return!1}switch(this.group.parity){case"odd_m":return D(l,2)===1;case"odd_n":return D(n,2)===1;case"odd_nm":return D(n+l,2)==1}return!0}update_coefficients(t,n,l){const _=ze(n,this.grid_size),T=this.frequency_map(_),k=[];if(this.group.base_rule){const i=Ne(this.group.base_rule,T),u=i.length+1,c=l.scale(1/u),d=[T,...i].map(g=>[g,c]);k.push(...d)}else k.push([T,l]);const h=this.group.rules??[];for(const i of h){const u=k.map(([c,d])=>{const g=Ie(i.partner,c);let E=d;return i.negate&&(E=We(i.negate,d,c)),[g,E]});k.push(...u)}for(const[i,u]of k){const c=this.inverse_frequency_map(i),d=Ae(c,this.grid_size);t[d]=u}}}const Ge={class:"form-row"},Oe=["value"],De=["value"],Fe=["value"],Ze={class:"form-row"},Be={class:"form-row"},je=["onClick"],He=se({__name:"WallpaperPaletteEditor",props:{modelValue:{}},emits:["update:modelValue"],setup(o,{emit:t}){const l=P(o.modelValue),_=t;q(l,h=>{_("update:modelValue",h)},{deep:!0});function T(h){l.value.colors=l.value.colors.filter((i,u)=>u!==h)}function k(){l.value.colors.length>=12||l.value.colors.push(new Se(0,0,0))}return(h,i)=>(f(),v(N,null,[e("div",Ge,[e("label",null,[p(" Palette Type "),C(e("select",{"onUpdate:modelValue":i[0]||(i[0]=u=>l.value.palette_type=u)},[e("option",{value:S(A).HorizontalStripes},"Horizontal Stripes",8,Oe),e("option",{value:S(A).VerticalStripes},"Vertical Stripes",8,De),e("option",{value:S(A).Plaid},"Plaid",8,Fe)],512),[[U,l.value.palette_type]])])]),C(e("div",Ze,[e("label",null,[p(" Plaid diagonal thickness "),m(be,{min:1,max:20,step:1,modelValue:l.value.diagonal_thickness,"onUpdate:modelValue":i[1]||(i[1]=u=>l.value.diagonal_thickness=u)},null,8,["modelValue"])])],512),[[pe,l.value.palette_type===S(A).Plaid]]),(f(!0),v(N,null,F(l.value.colors,(u,c)=>(f(),v("div",{key:c},[e("div",Be,[m(Ee,{modelValue:l.value.colors[c],"onUpdate:modelValue":d=>l.value.colors[c]=d},{default:y(()=>[p("Color "+Z(c+1)+": ",1)]),_:2},1032,["modelValue","onUpdate:modelValue"]),e("button",{onClick:d=>T(c)},"Remove Color",8,je)])]))),128)),e("div",{class:"form-row"},[e("button",{onClick:k},"Add color")])],64))}}),Qe=e("h2",null,"Wallpaper Maker",-1),Xe=e("p",null,[p(" Using the dropdowns below, select a "),e("a",{href:"https://en.wikipedia.org/wiki/Wallpaper_group"},"wallpaper group"),p(" or one of the color-reversing variations listed in "),e("cite",null,"Creating Symmetry")],-1),Je={class:"form-row"},Ke=e("label",{for:"wallpaper-category"},"Select Category: ",-1),Ye=e("option",{value:"wallpaper"},"17 Wallpaper Groups",-1),et=e("option",{value:"reversing"},"46 Color-reversing Wallpaper Groups",-1),tt=[Ye,et],ot={class:"form-row"},lt=e("label",{for:"group"},"Select Wallpaper Group: ",-1),nt=["value"],at=["value"],st=e("p",null,[e("strong",null,"Note:"),p(" changing the symmetry type will reset the pattern! This is because the mathematical constraints are often different from one symmetry type to the next. A new pattern can be created in the Pattern tab. ")],-1),rt=e("details",null,[e("summary",null,"Math Details"),e("p",null," Wallpaper waves are the sum of plane waves traveling in different directions. Given how I implemented them in the shader, I phrase it slightly differently than the book does. The formula looks like this: "),e("math",{display:"block",class:"tml-display",style:{display:"block math"}},[e("mrow",null,[e("mi",null,"f"),e("mo",{form:"prefix",stretchy:"false"},"("),e("mi",null,"z"),e("mo",{form:"postfix",stretchy:"false"},")"),e("mo",null,"="),e("mrow",null,[e("munder",null,[e("mo",{movablelimits:"false"},"∑"),e("mrow",null,[e("mi",null,"n"),e("mo",{separator:"true"},","),e("mi",null,"m")])])]),e("msub",null,[e("mi",null,"a"),e("mrow",null,[e("mi",null,"n"),e("mo",{separator:"true"},","),e("mi",null,"m")])]),e("msup",null,[e("mi",null,"e"),e("mrow",null,[e("mn",null,"2"),e("mi",null,"π"),e("mi",null,"i"),e("mo",{form:"prefix",stretchy:"false"},"("),e("mi",null,"k"),e("mo",null,"⋅"),e("msup",null,[e("mi",null,"A"),e("mrow",null,[e("mo",{form:"prefix",stretchy:"false",lspace:"0em",rspace:"0em"},"−"),e("mn",null,"1")])]),e("mi",null,"z"),e("mo",{form:"postfix",stretchy:"false",lspace:"0em",rspace:"0em"},")")])])])]),e("p",null,[p(" Where "),e("math",null,[e("mi",null,"A")]),p(" is a matrix that changes to the basis of the lattice, "),e("math",null,[e("mi",null,"k")]),p(" is the wave vector (integer frequencies) and the dot represents a dot product (which makes the wave point in the direction of "),e("math",null,[e("mi",null,"k")]),p(" ) ")]),e("p",null," Similarly to the rosettes/friezes, the form takes the selected symmetry type and applies constraints to the coefficients to produce the desired symmetry. ")],-1),it=e("p",null," Select a term from the grid. Then click and drag in the complex plane below to edit the term. ",-1),ut={class:"form-row"},ct={class:"form-row"},pt={class:"form-row"},mt={class:"form-row"},dt={class:"form-row"},_t=e("summary",null,"Reference Geometry",-1),ft={key:0,class:"form-row"},ht={key:1},ae=3,Vt=se({__name:"WallpaperMakerView",props:{category:{default:"wallpaper"},categoryModifiers:{},symmetry_group:{default:O.p1},symmetry_groupModifiers:{},reversing_group:{default:oe.p1_p1},reversing_groupModifiers:{},enable_palette:{type:Boolean,default:!1},enable_paletteModifiers:{},ref_geom:{default:Re},ref_geomModifiers:{}},emits:["update:category","update:symmetry_group","update:reversing_group","update:enable_palette","update:ref_geom"],setup(o){const t=2*ae+1,n=t*t,l=ae,_=l*t+l,T=new xe,k=new Me,h=M(o,"category"),i=M(o,"symmetry_group"),u=M(o,"reversing_group"),c=me(()=>h.value==="wallpaper"?i.value:u.value),d=M(o,"enable_palette"),g=P(new ne(t,c.value)),E=P(Ce),L=M(o,"ref_geom"),W=P(),B=P(),j={series:te.from_tuples([[1,0,1,0],[0,1,1,0]]),group:i.value},x=new Ve({pattern:j,palette:E.value}),R={cell_size:40,rows:t,cols:t,selected_index:_,coefficients:new Array(n).fill(b.ZERO),frequency_map:r=>g.value.frequency_map(r),editable_map:r=>g.value.is_editable(r)},H=new we(R),Q={coefficient:ve.ZERO},$=new ye(Q);H.events.addEventListener("term-selected",r=>{const a=r.detail;Q.coefficient=a.to_rect()});function X(r){le(r,T).then(a=>{W.value=a}).catch(console.error)}function J(){const r=R.coefficients,a=[];for(let s=0;s<t;s++)for(let w=0;w<t;w++){const re=s*t+w,ee=r[re];if(ee.r===0)continue;const ie=g.value.frequency_map({row:s,col:w});a.push({frequencies:ie,coefficient:ee})}const V={series:new te(a),group:c.value};x.pattern=V,X(V)}function K(r){const a=r.detail;g.value.update_coefficients(R.coefficients,R.selected_index,a.to_polar()),J()}$.events.addEventListener("change",K),$.events.addEventListener("input",K),q(d,r=>{x.show_palette=r});function Y(r){le(r,k).then(a=>{B.value=a}).catch(console.error)}return q(E,r=>{x.palette=r,Y(r)},{deep:!0}),q(c,r=>{const a=r??O.p1;g.value=new ne(t,a),R.coefficients.fill(b.ZERO),R.selected_index=_,R.frequency_map=s=>g.value.frequency_map(s),R.editable_map=s=>g.value.is_editable(s),J()}),q(L,r=>{x.ref_geom=r},{deep:!0}),de(()=>{X(j),Y(E.value)}),(r,a)=>{const V=fe("RouterLink");return f(),_e(ge,null,{left:y(()=>[m(G,{sketch:S(x),is_card:!0},null,8,["sketch"])]),right:y(()=>[Qe,m(ke,null,{default:y(()=>[m(z,{title:"Symmetry"},{default:y(()=>[Xe,e("div",Je,[Ke,C(e("select",{id:"wallpaper-category","onUpdate:modelValue":a[0]||(a[0]=s=>h.value=s)},tt,512),[[U,h.value]])]),e("div",ot,[lt,h.value==="wallpaper"?C((f(),v("select",{key:0,id:"group","onUpdate:modelValue":a[1]||(a[1]=s=>i.value=s)},[(f(!0),v(N,null,F(S(O),(s,w)=>(f(),v("option",{key:w,value:s},Z(w),9,nt))),128))],512)),[[U,i.value]]):C((f(),v("select",{key:1,id:"group","onUpdate:modelValue":a[2]||(a[2]=s=>u.value=s)},[(f(!0),v(N,null,F(S(oe),(s,w)=>(f(),v("option",{key:w,value:s},Z(w),9,at))),128))],512)),[[U,u.value]])]),st,rt]),_:1}),m(z,{title:"Pattern"},{default:y(()=>[it,e("div",ut,[m(G,{sketch:S(H),is_card:!1},null,8,["sketch"])]),e("div",ct,[m(G,{sketch:S($),is_card:!1},null,8,["sketch"])])]),_:1}),m(z,{title:"Palette"},{default:y(()=>[e("p",null,[p(' Select a palette type and edit the colors to customize your design. The "Show color palette" button shows what the color palette looks like for reference. See the '),m(V,{to:"/point_symmetry/tie_dye_analogy"},{default:y(()=>[p("Tie-Dye Analogy page")]),_:1}),p(" for an explanation of how the palette is applied. ")]),e("div",pt,[e("label",null,[C(e("input",{id:"toggle-palette",type:"checkbox","onUpdate:modelValue":a[3]||(a[3]=s=>d.value=s)},null,512),[[he,d.value]]),p(" Show color palette ")])]),e("div",mt,[m(He,{modelValue:E.value,"onUpdate:modelValue":a[4]||(a[4]=s=>E.value=s)},null,8,["modelValue"])]),e("details",dt,[_t,m(Te,{modelValue:L.value,"onUpdate:modelValue":a[5]||(a[5]=s=>L.value=s)},null,8,["modelValue"])])]),_:1}),m(z,{title:"Export"},{default:y(()=>[W.value?(f(),v("div",ft,[m(V,{to:{path:"/wallpaper_symmetry",query:{custom_pattern:W.value,custom_palette:B.value}},target:"_blank"},{default:y(()=>[p("Viewer Link")]),_:1},8,["to"])])):(f(),v("div",ht,"Create a pattern using the other tabs, then a link will appear here"))]),_:1})]),_:1})]),_:1})}}});export{Vt as default};
